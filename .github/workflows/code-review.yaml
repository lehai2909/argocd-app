name: Fetch PRs from all repo in org and Send Email

on:
  schedule:
    - cron: "30 10 * * *" # every day at 10:30 AM UTC
  workflow_dispatch:

jobs:
  fetch-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (not needed, but often standard)
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install requests

      - name: Fetch PRs and send email
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_ORG }}
          ORG_NAME: lehai-org
          GMAIL_USER: lehai2909@gmail.com
          GMAIL_PASS: ${{ secrets.GMAIL_APP_PASSWORD }}
        run: |
          python python-script.py
          # python -c "
          # import os
          # import requests
          # import smtplib
          # from email.mime.text import MIMEText

          # headers = {
          #     'Authorization': f'token {os.environ[\"GH_TOKEN\"]}',
          #     'Accept': 'application/vnd.github+json'
          # }

          # def get_repos(org):
          #     repos = []
          #     page = 1
          #     while True:
          #         r = requests.get(f'https://api.github.com/orgs/{org}/repos?per_page=100&page={page}', headers=headers)
          #         if r.status_code != 200 or not r.json():
          #             break
          #         repos.extend(r.json())
          #         page += 1
          #     return [repo['name'] for repo in repos]

          # def get_pull_requests(org, repo):
          #     r = requests.get(f'https://api.github.com/repos/{org}/{repo}/pulls?state=open', headers=headers)
          #     return r.json() if r.status_code == 200 else []

          # def has_copilot_comments(org, repo, pr_number):
          #     comments_url = f'https://api.github.com/repos/{org}/{repo}/issues/{pr_number}/comments'
          #     r = requests.get(comments_url, headers=headers)
          #     if r.status_code != 200:
          #         return False
          #     return any('lgtm' in comment['body'].lower() for comment in r.json())

          # def list_comments_by_copilot(org, repo, pr_number):
          #     list_comments = ''
          #     comments_url = f'https://api.github.com/repos/{org}/{repo}/issues/{pr_number}/comments'
          #     r = requests.get(comments_url, headers=headers)
          #     for comment in r.json():
          #       if comment['user']['login'] == 'lehai2909':
          #         list_comments = list_comments + '-- Comment by ' + comment['user']['login'] + ': ' + comment['body'] + '\n\n'
          #     return list_comments 
              

          # org = os.environ['ORG_NAME']
          # repos = get_repos(org)
          # # repos = ['github-action-repo'] 
          # print(repos)
          # matching_prs = []
          # body = ''
          # summary_table = "Open PRs per Repository:\n\nRepo | Open PRs\n---- | ---------\n"
          # repo_pr_counts = {}

          # for repo in repos:
          #     prs = get_pull_requests(org, repo)
          #     repo_pr_counts[repo] = len(prs)

          # for repo, count in repo_pr_counts.items():
          #     summary_table += f"{repo} | {count}\n"

          # body = summary_table + "\n\n"  # Prepend table to email body

          # for repo in repos:
          #     prs = get_pull_requests(org, repo)
          #     if not len(prs):
          #         continue
          #     for pr in prs:
          #         body += f'Repository: {repo}\n\n'
          #         body += '### List of Pull Requests with lehai2909 Comments:\n\n'
          #         body += f'- PR #{pr["number"]}: {pr["title"]} ({pr["html_url"]})\n\n'
          #         body += list_comments_by_copilot(org, repo, pr["number"]) if list_comments_by_copilot(org, repo, pr["number"]) else 'No comments of lehai2909 found.\n\n'
          #     body += '------------------------------------------\n\n'

          # print('Email body:')          
          # print(body)

          # # if not matching_prs:
          # #     body = 'No PRs with Copilot comments found.'
          # # else:
          # #     body = 'Pull Requests with Copilot Comments:\n\n' + '\n'.join(matching_prs)
          # # print(body)

          # msg = MIMEText(body)
          # msg['Subject'] = f'GitHub Copilot PRs Report ({org})'
          # msg['From'] = os.environ['GMAIL_USER']
          # msg['To'] = 'aws2lehai@gmail.com'  # or use dynamic address

          # with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
          #     server.login(os.environ['GMAIL_USER'], os.environ['GMAIL_PASS'])
          #     server.sendmail(msg['From'], [msg['To']], msg.as_string())
          # "
